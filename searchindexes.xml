<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>Test1</title><url>/post/test1/</url><categories/><tags/><content type="html"></content></entry><entry><title>Hugo 部署&使用</title><url>/post/hugo-blog/</url><categories><category>技术</category></categories><tags><tag>博客</tag></tags><content type="html"><![CDATA[  Hugo部署下载hugo安装包解压到指定目录 配置环境变量 开始建站 #新建站点 hugo new site myblog cd quickstart #初始化 git init #添加主题 git submodule add https://github.com/hugo-next/hugo-theme-next.git themes/hugo-theme-next echo &#34;theme = &#39;hugo-theme-next&#39;&#34; &gt;&gt; hugo.toml hugo server 📝发表新文章hugo new post/my-first-post.md 部署到GitHub Pages假设你需要部署在 GitHub Pages 上，首先在GitHub上创建一个Repository，命名为：infinitejk.github.io（infinitejk替换为你的github用户名）。 在站点根目录执行 Hugo 命令生成最终页面:
hugo -t=hugo-theme-next -b=&#34;https://infinitejk.github.io/&#34; 如果一切顺利，所有静态页面都会生成到 public 目录，将pubilc目录里所有文件 push 到刚创建的Repository的 master 分支。
cd public git init git remote add origin https://github.com/infinitejk/infinitejk.github.io.git git add -a git commit -m &#34;first commit&#34; git push -u origin master Hugo ThemestackNexT  ]]></content></entry><entry><title>JAVA 常见问题</title><url>/post/java%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url><categories><category>开发</category></categories><tags><tag>java</tag></tags><content type="html"><![CDATA[  并发的小问题自测（javaGuide）什么是线程和进程? 线程与进程的关系,区别及优缺点？ 说说并发与并行的区别? 为什么要使用多线程呢? 使用多线程可能带来什么问题?（内存泄漏、死锁、线程不安全等等） 创建线程有哪几种方式？（a.继承 Thread 类;b.实现 Runnable 接口;c. 使用 Executor 框架;d.使用 FutureTask） 说说线程的生命周期和状态? 什么是上下文切换? 什么是线程死锁?如何避免死锁? 说说 sleep() 方法和 wait() 方法区别和共同点? Java 内存模型（JMM）、重排序与 happens-before 原则了解吗？ synchronized 关键字、volatile 关键字 ThreadLocal 有啥用（解决了什么问题）？怎么用？原理了解吗？内存泄露问题了解吗？ 为什么要用线程池？ThreadPoolExecutor 类的重要参数了解吗？ThreadPoolExecutor 饱和策略了解吗？线程池原理了解吗？几种常见的线程池了解吗 为什么不推荐使用FixedThreadPool？如何设置线程池的大小？ AQS 了解么？原理？AQS 常用组件：Semaphore (信号量)、CountDownLatch （倒计时器） CyclicBarrier(循环栅栏) ReentrantLock 、 ReentrantReadWriteLock 、StampedLock（JDK8） CAS 了解么？原理？ Atomic 原子类 并发容器：ConcurrentHashMap 、 CopyOnWriteArrayList 、 ConcurrentLinkedQueueBlockingQueue 、ConcurrentSkipListMap Future 和 CompletableFuture JVM的小问题什么是虚拟机？ Java 内存区域是怎么划分的？大对象放在哪个内存区域？ 垃圾回收有哪些算法？GC 的流程 什么是类加载？何时类加载？类加载流程？ 知道哪些类加载器。类加载器之间的关系？ 类加载器的双亲委派了解么？ 结合 Tomcat 说一下双亲委派（Tomcat 如何打破双亲委托机制？&hellip;）。 常见调优参数有哪些？ MySQL学习了 MySQL 之后，务必确保自己掌握下面这些知识点：
MySQL 常用命令 ： 安全：登录、增加/删除用户、备份数据和还原数据 数据库操作： 建库建表/删库删表、用户权限分配 &hellip;&hellip; MySQL 中常用的数据类型、字符集编码 MySQL 简单查询、条件查询、模糊查询、多表查询以及如何对查询结果排序、过滤、分组&hellip;&hellip; MySQL 中使用索引、视图、存储过程、游标、触发器 &hellip;&hellip; 如果你想让自己更加了解 MySQL ，同时也是为了准备面试的话，下面这些知识点要格外注意：
索引：索引优缺点、B 树和 B+树、聚集索引与非聚集索引、覆盖索引 事务：事务、数据库事务、ACID、并发事务、事务隔离级别 存储引擎（MyISAM 和 InnoDB） 锁机制与 InnoDB 锁算法
总结另外，我在上面也说了，如果你觉得内容比较多自己学不完或者如果你只想找到一份小厂的开发工作的话，建议你把重心放在 Java基础、数据库、常用框架、常用工具上。 像 JVM、分布式、高并发、高可用、微服务这些知识点，如果你想进大厂或者说让自己在求职的时候更有竞争力，那你就也是要多花一点时间来学习的。
  ]]></content></entry><entry><title>nacos</title><url>/post/springcloud/</url><categories><category>技术</category></categories><tags><tag>java</tag></tags><content type="html"><![CDATA[  
Eureka&lt;!--spring-cloud-starter-eureka-server --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt; &lt;version&gt;1.4.7.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!-- spring-cloud-starter-eureka --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;version&gt;1.4.7.RELEASE&lt;/version&gt; &lt;/dependency&gt; CAP原则C (Consistency) 强一致性 A (Avaliablity) 可用性 P (Partition tolerance) 分区容错性 CAP理论的核心根据CAP，将NoSQL数据库分成了满足CA原则、满足CP原则、满足AP原则三大类: CA: 单点集群，满足一致性，可用性的系统，通常可扩展性较差 CP: 满足一致性，分区容错性的系统,通常性能不是特别高 AP: 满足可用性，分区容错性的系统，对一致性要求较低 zookeeper和eureka的区别？作为服务注册中心，eurake比zookeeper更合适。 zookeeper保证的是CP，eureka保证的是AP(在分布式系统中，分区容错性是一定要保证的) ZooKeeper 选举leader时间长，此期间集群不可用 Eureka 各节点平等
自我保护机制（心跳）：15分钟内超过85%的节点都没有正常的心跳，认为客户端和注册中心出现网络故障，会出现以下几种情况
Eureka不再从注册列表中移除因为长时间没收到心跳而应该过期的服务 Eureka仍然能够接受新服务的注册和查询请求，但是不会同步到其他节点（保证当前节点可用） 当网络稳定时，当前实例新的注册信息会被同步到其他的节点上 总结：Eureka可以很好的应对网络故障导致部分节点失去联系的情况，不会像zookeeper那样使整个注册服务瘫痪 http和rpc的区别
Ribbon客户端负载均衡的工具 LB:负载均衡(load balance)——将用户的请求平摊的分配到多个服务上，从而达到系统的HA(高可用)。
集中式LB: 在服务消费方和提供方之间设置独立的LB设施，如Nginx: 向代理服务器 进程式LB: 将负载均衡的逻辑集成到消费方，消费方从注册中心获得可用的地址，在自己选择合适的服务器 Ribbon使用导入依赖*&lt;!--Ribbon--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-ribbon&lt;/artifactId&gt; &lt;version&gt;1.4.7.RELEASE&lt;/version&gt; &lt;/dependency&gt; 1.4.7的Eureka中有loadBalancer就不需要导包 通过服务名去注册中心里获取可用的服务器
Feign接口和注解:
//创建一个service的接口，通过注解的value值来发现服务 @FeignClient(value = &#34;SPRINGCLOUD-PROVIDER-DEPT&#34;) public interface DeptClientService { @RequestMapping(&#34;/dept/add&#34;) public boolean add(Dept dept); @RequestMapping(&#34;/dept/get/{id}&#34;) public Dept get(@PathVariable(&#34;id&#34;) int id); @RequestMapping(&#34;/dept/list&#34;) public List&lt;Dept&gt; queryAll(); } //在controller层，从容器中获得这个feign的接口，调用接口中的方法 @Autowired private DeptClientService service=null; @RequestMapping(&#34;/consumer/dept/add&#34;) public boolean add(Dept dept) { return this.service.add(dept); } //最后在启动类上配置feign @EnableFeignClients(basePackages = {&#34;com.infinite.springcloud&#34;}) public class DeptConsumer_feign { public static void main(String[] args) { SpringApplication.run(DeptConsumer_feign.class,args); } } Hystrix熔断：服务端 某个服务超时或者异常，引起熔断 （缺省是5秒内20次调用失败就会启动熔断机制） @HystrixCommond(value=&quot;方法名&quot;)
降级：客户端 从整体网站请求负载考虑。当某个服务熔断或者关闭后，服务将不再被调用 在客户端准备一个FallbackFactory,返回一个缺省值。
整体的服务水平下降，但是保证可用，不会直接挂掉
Hystrix使用服务熔断&lt;!--导入依赖 spring-cloud-starter-hystrix 1.4.7 已过期--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt; &lt;version&gt;2.0.0.RELEASE&lt;/version&gt; &lt;/dependency&gt; //配置解决方法 @GetMapping(&#34;/dept/get/{id}&#34;) @HystrixCommand(fallbackMethod = &#34;hystrixGet&#34;) public Dept get(@PathVariable int id){ Dept dept = deptService.queryById(id); if(dept==null){ throw new RuntimeException(&#34;id=&gt;&#34;+id+&#34;,该用户不存在&#34;); } return dept; } //备选方案 public Dept hystrixGet(@PathVariable int id){ return new Dept() .setDeptNo(id) .setDeptName(&#34;id=&gt;&#34;+id+&#34;,该用户不存在,null--@Hystrix&#34;) .setDbName(&#34;no this database in MySQL&#34;); } //在启动类上开启该功能 @EnableHystrix public class DeptProviderHystrix_8001 { public static void main(String[] args) { SpringApplication.run(DeptProviderHystrix_8001.class,args); } } 服务降级//客户端 DashBoard流监控&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt; &lt;version&gt;2.2.0.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt; &lt;version&gt;2.0.0.RELEASE&lt;/version&gt; &lt;/dependency&gt; //配置启动类 @SpringBootApplication @EnableHystrixDashboard public class DeptConsumer_Dashboard_9001 { public static void main(String[] args) { SpringApplication.run(DeptConsumer_Dashboard_9001.class,args); } } //配置监控url，在服务提供者 @Bean public ServletRegistrationBean hystrixMetricsStreamServlet() { ServletRegistrationBean registrationBean = new ServletRegistrationBean(new HystrixMetricsStreamServlet()); registrationBean.addUrlMappings(&#34;/actuator/hystrix.stream&#34;); return registrationBean; }   ]]></content></entry><entry><title>Python学习笔记</title><url>/post/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url><categories><category>技术</category></categories><tags><tag>python</tag></tags><content type="html"><![CDATA[  1. Python简介Python是一种高级编程语言，具有简单易学、功能强大、可移植性强、跨平台等特点。Python支持多种编程范式，包括面向对象、命令式、函数式编程。Python的语法简洁，代码可读性强，适合学习和快速开发。
Python的应用领域包括Web开发、数据分析、科学计算、机器学习、人工智能、游戏开发等。
2. Python安装Python安装非常简单，可以从Python官网下载安装包安装，也可以使用包管理工具pip进行安装。
3. Python环境配置Python安装完成后，需要配置环境变量，使其能够在命令行中直接运行。配置环境变量的方法有多种，具体取决于操作系统。
Windows环境配置在Windows系统中，可以直接在系统环境变量PATH中添加Python安装目录，或者将Python安装目录添加到PATH环境变量中。
安装地址：https://www.python.org/downloads/4. Python基本语法Python的基本语法包括变量、数据类型、运算符、条件语句、循环语句、函数、模块、类等。
4.1 变量变量是存储数据的地方，在Python中，变量不需要声明类型，可以直接赋值。
4.2 数据类型和变量4.3 字符串和编码4.4 使用list和tuplelist 列表 有序集合 L = [1,2,3] 用下标访问 L[0]=1
tuple 元组 (1,2,3)
4.5 条件判断4.6 模式匹配4.7 循环语句4.8 使用dict和setdict 字典 注意：dict的key必须是不可变对象 4.9 函数关键字参数 允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。 def person(name,age,**kw): print(&#34;name:&#34;,name,&#34;age:&#34;,age,&#34;other:&#34;,kw) 在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。
5. Python高级特性Python还有一些高级特性，如列表解析、生成器、异常处理、装饰器、元类等。
6. Python第三方库Python的第三方库非常丰富，涵盖了Web开发、数据分析、科学计算、机器学习、人工智能、游戏开发等领域的应用。
7. Python资源Python的资源包括书籍、教程、文档、社区、工具等。
  ]]></content></entry><entry><title>Redis学习笔记</title><url>/post/redis/</url><categories><category>技术</category></categories><tags><tag>java</tag></tags><content type="html"><![CDATA[  linux 下安装 Redis# 上传压缩包。移动到 /opt目录下并解压 1. 移动 mv redis-6.0.6.tar.gz /opt/ 2. 解压 tar zxvf redis-6.0.6.tar.gz 3. 编译，需要安装gcc-c++环境 yum install gcc-c++ （ubuntu下安装 apt install build-essential ） 4. make 命令 编译redis 完成后在make一次 ，最后make install 安装 5. redis的默认安装路径 /usr/local/bin 6. 新建一个目录，将配置文件拷贝过来 mkdir myconfig cp /opt/redis-6.0.6/redis.conf myconfig 7. redis默认不是后台启动的，要进行修改 vim 打开redis.conf 将daemonize no改为yes,保存，退出 8. 通过指定的配置文件启动 redis-server myconfig/redis.conf 9. 使用客户端进行连接 redis-cli -p 6379 10.关闭redis shutdown 性能测试工具redis-benchmark redis-benchmark -h localhost -p 6379 -c 100 -n 100000 基础知识16 个数据库 set key value 时出现问题，MISCONF Redis is configured to save RDB snapshots, but it is currently not able to persist on disk 解决：将 stop-writes-on-bgsave-error 值设置为 no
五大数据类型Stringincr decr incrby decrby set get setex Expire key second :设置当前key的过期时间 setnx mset mget ttl: 查看过期剩余时间 msetnx 原子性 getset ListLpush list 1 Rpush list 3 Lpop Rpop lrange list 0 -1 lindex list 0 Llen list lrem list count key 移除指定数量的key ltrim list start stop 通过下标截取 rpoplpush 移除最后一个元素，添加到新的list lset list index key 更新列表中指定下标的值 linsert 插入 setsadd set hello 添加元素 smembers set 取值 sismember set key 判断key是否是set中元素 scard set 查看set的长度 srem set key 移除set集合中的指定元素 srandmember set count 随机抽出指定个数的元素 spop set 随机删除一个元素 smove set set1 key 向指定集合移动元素 sdiff set set1 差集 sinter set set1 交集 #共同好友 sunion set set1 并集 hashhset myhash field value 存值 hget myhash field 取值 hmset myhash field1 hello field2 world hmget myhash field1 field2 获取指定的key-value hgetall myhash 获取所有的key-value hdel myhash field1 删除指定的key hlen myhash 获取长度 Hexists myhash field1 判断指定字段是否存在 hkeys myhash 只获取key hvals myhash 只获取value hincrby myhash field1 5 指定字段增量 hsetnx myhash field4 hello 不存在就创建 hset user:1 name jikai hmset 多个值的存储 hash适合对象的存储，string适合存字符串 Zset(有序集合)zadd myset score key 添加元素，score是一个标识，用来排序 zadd myset score1 key1 score2 key 添加多个元素 #例子 zadd salary 3500 xiaoohong zadd salary 500 xiaolan zadd salary 1500 xiaohei zrangebyscore salary -inf +inf 从小到大排序 zrangebyscore salary -inf +inf withscores 从小到大排序带成绩 zrevrangebyscore salary 0 -1 从大打小 ############################### zrange salary 0 -1 显示所有元素 zrem salary xiaohong 移除元素 zcard salary 获取有序集合中元素的个数 zcount myset 1 3 获取指定区间的成员数量 排行榜应用
三种特殊数据类型geospatial 地理位置朋友定位，打车距离计算，推算地理位置信息
# 经度、纬度、名称 geoadd china:city 116.40 39.90 beijing 添加地理位置信息 geopos china:city beijing shanghai 查询地理位置 geodist china:city beijing shanghai 两地之间的距离 georadius china:city 110 30 1000 km 指定位置和半径内的所有元素 georadius china:city 110 30 1000 km withcoord withdist count 3 georadiusbymember china:city beijing 100 km 底层是 zset，可以用 zset 的命令来操作 geo
hyperloglog基数统计的算法 （基数：集合中不重复的元素）
pfadd mykey a b c #创建第一组元素 pfcount mykey #统计 mykey中基数的数量 pfmerge mykey3 mykey1 mykey2 #合并到mykey3 bitmap 位存储（只有 0 和 1）bitmap 位图 统计用户信息，当只有两种状态 0 1 时可以使用
setbit sign 1 0 setbit sign 2 1 setbit sign 3 1 getbit sign 1 bitcount sign 统计为1的数量 事务==redis 单条命令是保证原子性的，redis 的事务不保证原子性== ==redis 没有隔离级别的概念== redis 事物的本质：一组命令的集合！一个事务中的所有命令都会被序列化，在事务执行过程中，会按照顺序执行 一次性、顺序性、排他性
使用事务的步骤正常执行事务
开启事务（multi） 命令入队（。。。。） 执行事务（exec） 放弃事务 discard
编译型异常（代码有问题，命令有问题）所有命令都不会执行 运行时异常 这一行命令不会执行，其他还是会执行
监控（watch）- 加锁
悲观锁: 认为什么时候都会出问题，无论做什么全部加锁 乐观锁：默认没有问题，更新数据的时候去判断在此期间是否有人修改过数据 MySQL 获取 version,更新时比较 version 解锁 （unwatch）
redis 实现乐观锁使用 watch 去实现, 监控 money 对象 事务正常结束，数据在这期间没有发生变化 如果有另外一个线程改变了这个数据，事务就不会正常执行，这时候先解锁，重新获取一下最新值，再次监控执行事务
Jedis导入 jedis 的包&lt;!--jedis--&gt; &lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;4.1.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.75&lt;/version&gt; &lt;/dependency&gt; 连接远程数据库# 配置redis.conf文件 注释 bind 127.0.0.1 设置密码 requirepass 134567 去掉保护模式 protected-mode no 防火墙开启6379端口 整合 springbootjedis：采用的直连，多线程操作不安全，可以使用 jedis pool 连接池 更像 BIO lettuce：采用 netty,实例可以在多个线程之间共享 更像 NIO
BIO NIO 的基本概念和区别？ 同步和异步： io 操作分为两个步骤 发起 IO 请求和实际 IO 操作，同步和异步的区别在于实际 IO 操作是否阻塞，异步不需要等待处理结果， 阻塞和非阻塞： 阻塞就是要等待，非阻塞就是调用者不用等待，先去干别的事，有了结果再去通知调用者 BIO(Blocking IO) 同步阻塞 IO,数据的读写必须阻塞在一个线程内等待其完成 NIO(new IO) 同步非阻塞 AIO(Asynchronous IO) 异步非阻塞 当前 springboot 版本使用的 lettuce
导入依赖
&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt; &lt;/dependency&gt; 配置文件
#远程数据库的ip地址 spring.redis.host=110.42.153.193 #端口号 spring.redis.port=6379 #连接密码 spring.redis.password=134567 使用RedisTemplate
@Autowired private RedisTemplate redisTemplate; @Test void contextLoads() { //几种数据类型的操作 // redisTemplate.opsForValue(); // redisTemplate.opsForList(); // redisTemplate.opsForSet(); // redisTemplate.opsForHash(); // redisTemplate.opsForZSet(); // redisTemplate.opsForGeo(); // redisTemplate.opsForHyperLogLog(); // redisTemplate.opsForCluster(); //集群相关的 //获取连接 // RedisConnection connection = redisTemplate.getConnectionFactory().getConnection(); // connection.flushDb(); // connection.flushAll(); redisTemplate.opsForValue().set(&#34;name&#34;,&#34;监控&#34;); System.out.println(redisTemplate.opsForValue().get(&#34;name&#34;)); } ==redis 对象需要进行序列化==
序列化的作用
配置自己的 redisTemplate 并设置自己的序列化操作
@Configuration public class RedisConfig { @Bean //自定义RedisTemplate public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) { RedisTemplate&lt;String, Object&gt; template = new RedisTemplate(); template.setConnectionFactory(redisConnectionFactory); //Json序列化配置 Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class); //string的序列化 StringRedisSerializer stringRedisSerializer = new StringRedisSerializer(); //key 采用string的序列化方式 template.setKeySerializer(stringRedisSerializer); //hash的key 采用string的序列化方式 template.setHashKeySerializer(stringRedisSerializer); //value 采用jackson的序列化方式 template.setValueSerializer(jackson2JsonRedisSerializer); //hash的value 采用jackson的序列化方式 template.setHashValueSerializer(jackson2JsonRedisSerializer); template.afterPropertiesSet(); return template; } } 真实的开发中，有一个 redis 的工具类，封装了一些常用命令
Redis.conf 详解限制客户端连接
Redis 持久化策略RDB(Redis DataBase) 快照过程： Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程结束，再用这个临时文件替换上次持久化的文件，主进程不进行任何io操作，对数据恢复的完整型不是非常敏感。 ==保存的文件名 dump.rdb== 缺点：最后一次持久化后的数据可能丢失
触发机制：
满足 save 规则 # 900秒内修改一次 save 900 1 # 300秒内修改10次 save 300 10 save 60 10000 执行 flushall 命令 退出 redis 如何恢复 rdb 文件，放到 redis 启动目录即可
AOF(AppendOnlyFile)将所有的命令全部记录下来（日志的形式） ==保存的文件名 appendonly.aof== 只记录写的操作， 默认不开启，需要手动配置 redis.config appendonly设为yes
如果 aof 文件有问题，会出现错误，启动不了 redis，需要修复 aof 文件redis-check-aof --fix 如果正常，放到启动目录就可以恢复数据库
同步策略
# appendfsync always 每一次修改都同步 appendfsync everysec 每秒同步一次 # appendfsync no 从不同步 优点：
每一次修改都同步，文件的完整会更好 每秒同步一次，可能会丢失一秒数据 从不同步，性能最好 缺点： 对比RDB,文件更大,修复速度也较慢 aof的运行效率比rdb慢，所以redis的默认配置是rdb持久化 Redis发布订阅原理：
订阅端psubscribe pattern[pattern...]订阅一个或多个符合给定模式的频道 pubsub subcommand[argument]查看订阅与发布系统状态 subscribe channel 订阅一个频道 unsubscribe channel 退订频道 punsubscribe [pattern] 退订所有给定模式的频道
发布端publish channel message 叫消息发布到指定频道
使用场景：实时消息系统；实时聊天系统 复杂的场景：用消息中间件来实现
Redis主从复制一台主节点(master/leader)Redis服务器上的数据复制到从节点(slave/follower)Redis服务器==数据的复制是单向的，只能从主节点到从节点==主节点以写为主，从节点以读为主 ==默认情况下，每台Redis服务器都是主节点==
主从复制的作用数据冗余：实现数据的热备份，是持久化之外的一种数据冗余方式 故障恢复：主节点出现问题时，可由从节点提供服务 负载均衡：读写分离。多个节点分担读负载 高可用基石：哨兵模式和集群实施的基础 ==一台Redis服务器的内存容量不要超过20G==
环境配置只要配置从库，不用配置主库 info replication 查看redis主从复制信息 复制3个配置文件修改相应配置
端口 pid log文件名字 dump.rdb 一主二从认老大！ slaveof host port 真实的主从复制应该在配置文件中配置，命令行只是暂时的 只能在主机写，从机只能读
复制原理 只要==重新连接==到主机就会进行一次全量复制（master传送整个数据文件到slave,并完成一次完全同步） 增量复制：master继续将新的所有收集到的修改命令依次传给slave，完成同步
层层链路 一个从节点还有一个从节点 如果主机宕机，那么该如何选出一个新的主机 slaveof no one 使自己成为主节点，谋筹篡位
哨兵模式（自动选举老大）步骤：
配置哨兵配置文件 sentinel.conf # sentinel monitor 被监控的名称 host port 1 sentinel monitor myredis 127.0.0.1 6379 1 最后的这个1 代表主机挂了的时候，slave投票推选一个新主机，票数多的就会成为主机1 2. 启动哨兵 redis-sentinel kconfig/sentinel.conf 如果有多个哨兵，则需要有多个哨兵配置文件 优点:
哨兵集群，基于主从复制模式，所有的主从配置优点都有 主从可以切换，故障可以转移，系统的可用性更高 哨兵模式就是主从模式的升级，手动配置到自动，更加健壮 缺点：
Redis不好在线扩容，集群数量一旦达到上限，在线扩容十分麻烦 哨兵模式的配置很麻烦，里面会有很多选择 Redis缓存穿透和雪崩服务的高可用 怎么将数据库中的数据存到缓存中？
缓存穿透（查不到）解决方案：
布隆过滤器 缓存空对象 存在的问题
缓存需要更多的空间存储更多的键 缓存层和存储层数据不一致 缓存击穿（量太大，缓存过期）解决方案
设置热点数据不过期 加互斥锁 缓存雪崩（缓存集中过期失效，redis宕机）解决方案
redis高可用，多设置几台redis搭建集群 限流降级，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量 数据预热，把可能大量访问的数据加载到缓存中   ]]></content></entry><entry><title>springboot</title><url>/post/springboot/</url><categories><category>技术</category></categories><tags><tag>java</tag></tags><content type="html"><![CDATA[  mybatis开启实体类驼峰命名和数据库下划线命名自动转换mybatis: configuration: map-underscore-to-camel-case: true shiro访问某个资源时的执行流程执行认证→根据表单中username和password封装成一个token realm中接受到这个token，根据该token的username去数据库中查出该用户的信息，封装成一个对象 进行密码的校验 密码正确，登录成功→认证成功
否则，需要重新登录认证
认证成功后，再次访问资源，因为设置了权限，所以需要进行授权操作，授权的值来自数据库查询到的那个对象。 有了权限才能继续访问，否则跳转到无权限页面 注销，subject.logout() Swagger创建项目导入依赖&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt; &lt;/dependency&gt; SpringBoot集成swagger后出现: Failed to start bean ‘documentationPluginsBootstrapper‘的解决方法 解决办法：添加guava依赖，springboot降级→2.5.7 直接使用 springfox-boot-starter
访问 http://localhost:8080/swagger-ui.html
直接使用3.0.0
&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt; &lt;/dependency&gt; 访问 http://localhost:8080/swagger-ui/index.html
相关注解@Api：用在controller类，描述API接口 @ApiOperation：描述接口方法 @ApiModel：描述对象 @ApiModelProperty：描述对象属性 @ApiImplicitParams：描述接口参数 @ApiResponses：描述接口响应 @ApiIgnore：忽略接口方法 异步任务邮件任务导入依赖&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt; &lt;/dependency&gt; spring: mail: username: infinitejk@163.com password: SBUEQFLVQNELPIUK host: smtp.163.com public void mailUtils(boolean html,String subject,String setTo) throws MessagingException { MimeMessage mimeMessage = mailSender.createMimeMessage(); MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, html); helper.setSubject(subject); helper.setText(&#34;&lt;p style=&#39;color:red&#39;&gt;javamail发送&lt;/p&gt;&#34;,true); helper.addAttachment(&#34;1.txt&#34;,new File(&#34;D:\\博客md文档\\blog-md-document\\note\\12-22 实习日报.txt&#34;)); helper.setTo(setTo); helper.setFrom(&#34;infinitejk@163.com&#34;); mailSender.send(mimeMessage); } dubbo + zookeeper下载zookeeper,添加zoo.cog文件，运行 导入依赖 pom.xml
&lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-spring-boot-starter --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt; &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.7.8&lt;/version&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.sgroschupf&lt;/groupId&gt; &lt;artifactId&gt;zkclient&lt;/artifactId&gt; &lt;version&gt;0.1&lt;/version&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;version&gt;3.7.0&lt;/version&gt; &lt;!--排除slf4j--&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.curator&lt;/groupId&gt; &lt;artifactId&gt;curator-framework&lt;/artifactId&gt; &lt;version&gt;4.2.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.curator&lt;/groupId&gt; &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt; &lt;version&gt;4.2.0&lt;/version&gt; &lt;/dependency&gt; 服务提供者的流程
创建一个服务接口 写一个实现类，实现服务接口中的方法 将这个实现类注册到注册中心 public interface TicketService { String getTicket(); } import org.apache.dubbo.config.annotation.DubboService; //加上这个注解后，在启动时会被扫描到注册中心 @DubboService public class TicketServiceImpl implements TicketService{ @Override public String getTicket() { return &#34;校外实习票&#34;; } } 消费者的流程
获得注册中心里的服务 @DubboReference注解 pom坐标，或者和提供者路径相同的服务名 调用远端服务的方法 public class UserService { //想要获得生产者提供的票 //@Reference pom坐标，或者提供者相同的服务名 @DubboReference TicketService ticketService; //从注册中心调用服务 public void buyTicket(){ String ticket = ticketService.getTicket(); System.out.println(&#34;在注册中心拿到了&#34;+ticket); } }   ]]></content></entry><entry><title>Spring复习笔记</title><url>/post/spring%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url><categories><category>技术</category></categories><tags><tag>java</tag></tags><content type="html"><![CDATA[  核心部分IOC 控制反转将组件的控制权统一交给spring容器来管理,想用的时候直接到容器中去取出该组件
容器的底层：实际就是一个map，存放的是key-value型的数据
实例在容器中以单例的形式存在
DI 依赖注入从容器中取出组件的过程
通过xml配置文件来注册组件和取出组件
&lt;!-- id属性：组件的id→组件的name class属性:类的全类名 --&gt; &lt;bean id=&#34;userService&#34; class=&#34;com.infinite.service.UserServiceImpl&#34;/&gt; public void mytest1() { //加载Classpath路径下的xml格式的配置文件，初始化一个ApplicationContext的实例 👉 容器 ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&#34;application.xml&#34;); //还有别的获得容器的方式 //从容器中可以取出我们注册的组件 👉 getBean //getBean(String) 👉 按照组件id取出组件 UserService userService1 = (UserService) applicationContext.getBean(&#34;userService&#34;); //getBean(Class) 👉 按照组件类型取出组件，前提是该类型（类或接口）的组件在容器中只有一个 UserService userService2 = applicationContext.getBean(UserService.class); //getBean(String,Class) 👉 按照组件id和类型取出 UserService userService3 = applicationContext.getBean(&#34;userService&#34;, UserService.class); //取出来的组件可以正常调用实现类中的方法 userService1.sayHello(); userService2.sayHello(); userService3.sayHello(); } 生命周期  ]]></content></entry><entry><title>Vue学习笔记</title><url>/post/vue%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url><categories><category>技术</category></categories><tags><tag>vue</tag></tags><content type="html"> 配置淘宝镜像
npm config set registry https://registry.npm.taobao.org
新建项目步骤
新建工程 vue init webpack hello-vue 一路 选择 no
安装依赖 # 进入工程目录 cd hello-vue # 安装 vue-router npm install vue-router --save-dev # 安装 element-ui npm i element-ui -s # 安装依赖 npm install # 安装SASS加载器 cnpm install sass-loader node-sass --save-dev # 启动测试 npm run dev</content></entry><entry><title>商品模块的需求</title><url>/post/%E5%95%86%E5%93%81%E6%A8%A1%E5%9D%97%E7%9A%84%E9%9C%80%E6%B1%82/</url><categories><category>毕业设计</category></categories><tags><tag>java</tag></tags><content type="html"> 商品模块的需求
数据库表 商品表（product）
字段名 数据类型 描述 id int 商品id，全局唯一 categoryId int 商品的类别的id name varchar 商品名称 price decimal 商品价格 price decimal 商品价格 count bigint 商品数量（总的库存） sales bigcount 总销量 image varchar 商品描述图片的路径 status int 商品当前的状态 description varchar 商品的描述信息 content varchar 评价 规格表（）
字段名 数据类型 描述 id int 规格id product_id bigint 商品id name varchar 具体规格名称 price decimal 该规格的商品的价格 count int 该规格商品的库存 商品分类表（categary）
字段名 数据类型 描述 id bigint 分类id parent_id bigint 上级分类 0:第一级 name varchar 分类名 功能需求（接口）
商品信息的查询 全部可用商品的展示：从数据库中获取所有的可用商品，status=1 根据id查询，单独查看某一商品详情信息 购买前时，要提供规格，该规格的价格，该规格的库存 商家增加商品：商品信息的上传(会有描述图片的上传(异步))→商品信息的保存
商品信息的修改：该商品信息的回显，修改完成后，在保存
商品信息的删除：将商品的状态设为不可用
根据不同的条件排序（价格，销量）
下订单后，商品的库存要更新，不能出现商品已经售空，但是还可以买的情况
有哪些场景，具体流程怎么跑</content></entry><entry><title>云笔记开发文档</title><url>/post/%E4%BA%91%E7%AC%94%E8%AE%B0%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/</url><categories><category>毕业设计</category></categories><tags><tag>java</tag></tags><content type="html"><![CDATA[  项目背景开发时间2月14日创建数据库中用户的表 完善登录注册功能，springsecurity
2月19日-2月20日查找资料，外文资料翻译，知网资料 编写开题报告
用户登录和注册使用SpringSecurity作为安全框架，做权限验证
角色表(roles)
字段名 数据类型 描述 id int 角色id name varchar 角色 用户表(user)
字段名 数据类型 描述 id int 用户id username varchar 用户名 nickname varchar 昵称 password varchar 密码（加密存储） enable int 是否可用 email varchar 邮箱 avatar varchar 头像 create_time date 创建时间 update_time date 修改时间 用户角色关系表(user_roles_relationship)
字段名 数据类型 描述 uid int 用户id rid int 角色id 文本编辑器wangEditor富文本编辑器
mavonEditormarkdown编辑器
增量式同步技术rsync 算法
多人在线编辑
存储桶 英文翻译 https://www.infoworld.com/article/3222851/what-is-json-a-better-format-for-data-exchange.html什么是JSON？ 一种更好的数据交换格式 JSON已经超越XML成为web应用程序和web服务中优先选择的数据交换格式。原因如下。
JavaScript Object Notation是基于键值对和有序列表的结构化数据的无模式，基于文本的表示形式。 尽管JSON是从JavaScript派生出来的的，但是在本地和大部分主要编程语言的库中都支持JSON这个数据交换格式。 JSON通常会配合其它的交换格式一起用于在Web客户端和Web服务器之间交换信息。
在过去的15年里，JSON已经发展成为网络中不可或缺的一部分。 如今，它已成为所有公开可用的Web服务的首选格式，不仅如此，JSON还被频繁地用于私有Web服务。
JSON的流行还导致许多数据库支持都本机JSON。 关系型数据库，如PostgreSQL 和 MySQL 现在还对存储和查询JSON数据的提供了本地支持。NoSQL数据库像MongoDB和Neo4j同样也支持JSON，但是MongoDB在后台使用的是经过略微修改过的JSON二进制版本。
在本文中，我们将快速了解JSON，并讨论JSON的来源，对比XML有哪些优势和劣势。在这之外我们还需要思考JSON的使用时机以及什么时候要考虑替代方案。 但是首先，让我们深入了解JSON在实际使用中的格式。
JSON example 这是用JSON编码的数据的示例：
{ “firstName”: “Jonathan”, “lastName”: “Freeman”, “loginCount”: 4, “isWriter”: true, “worksWith”: [“Spantree Technology Group”, “InfoWorld”], “pets”: [ { “name”: “Lilly”, “type”: “Raccoon” } ] } 上面的结构清楚地定义了一个人的某些属性,包括名字和姓氏，此人登录的次数，此人是否是作家，与此人合作的公司的列表以及此人的宠物的列表（在上面这种情况下，只有一个宠物）。 可以将上述结构从服务器传递到Web浏览器或移动应用程序，然后它们将执行某些操作，例如显示数据或保存数据以供以后参考。
JSON是一种通用数据格式，它的值类型的数量最少，它的类型有字符串，数字，布尔值，列表，对象和null。 尽管该表示法是JavaScript的子集，但是这些类型在所有常见的编程语言中都有对应的表示，这使得JSON成为跨语言传输数据中的理想选择。
JSON file JSON数据存储在扩展名为.json的文件中。 为了符合JSON的人类可读性，这些只是纯文本文件，可以轻松打开和检查。 正如SQLizer博客解释的那样 ，这也是JSON更广泛的互操作性的关键，因为几乎每种您可以命名的语言都可以读取和处理纯文本文件，并且它们很容易通过Internet发送。
为什么要使用JSON？ 想要理解JSON的有用性和重要性，我们必须对网络交互的历史有所了解。
在2000年代初期，网络上的交互性开始发生变化。 当时，浏览器主要充当笨拙的客户端来显示信息，而服务器则做了所有艰苦的工作来准备要显示的内容。 当用户单击浏览器中的链接或按钮时，请求将发送到服务器，服务器将所需信息准备为HTML，浏览器会将HTML渲染为新页面。 这种模式比较缓慢且效率低下，即使只有浏览器的一部分发生改变，也要求浏览器重新渲染页面上的所有内容。
由于整页的重新加载成本很高，因此Web开发人员希望使用更新的技术来改善整体用户体验。 同时，最近在Internet Explorer 5中引入的在显示页面时后台还可以发出Web请求的功能被证明是一种可行的方法，这样就可以逐步加载数据以进行显示。 单击但是刷新页面的全部内容点击刷新按钮会触发一个请求，这个web请求会在后台进行加载，而不是重新加载该页面中的所有内容。当web请求的内容加载完成后，可以使用JavaScript（浏览器中的通用编程语言）来操作数据，保存数据并将其显示在页面上。
REST vs. SOAP: The JSON connection 最初，此数据是使用称为SOAP（简单对象访问协议）的消息传递协议以XML格式（请参见下面的示例）传输的。 但是XML冗长且难以在JavaScript中管理。 JavaScript已经有了对象，这是在语言中表达数据的一种方式，因此Douglas Crockford将该表达式的子集用作新数据交换格式的规范，并将其称为JSON。 JSON对于人们来说更容易阅读，对于浏览器来说更容易解析。
在20年代，另一种Web服务技术，称为代表性状态传输（REST），开始超过SOAP来传输数据。 使用REST API进行编程的最大优势之一是，您可以使用多种数据格式-不仅是XML，还可以使用JSON和HTML。 随着Web开发人员开始偏爱JSON而不是XML，他们也开始偏爱REST而不是SOAP。 正如Kostyantyn Kharchenko在Svitla博客上所说 ：“在很多方面，REST的成功都归功于JSON格式，因为它易于在各种平台上使用。”
如今，JSON已成为事实上的标准，用于在Web和移动客户端以及后端服务之间交换数据。
JSON vs. XML 如上所述，JSON的主要替代方法是XML。 但是，XML在新系统中变得越来越普遍，并且很容易理解为什么。 下面是您上面看到的数据的版本，这次是XML：
&lt;?xml version=&#34;1.0&#34;?&gt; &lt;person&gt; &lt;first_name&gt;Jonathan&lt;/first_name&gt; &lt;last_name&gt;Freeman&lt;/last_name&gt; &lt;login_count&gt;4&lt;/login_count&gt; &lt;is_writer&gt;true&lt;/is_writer&gt; &lt;works_with_entities&gt; &lt;works_with&gt;Spantree Technology Group&lt;/works_with&gt; &lt;works_with&gt;InfoWorld&lt;/works_with&gt; &lt;/works_with_entities&gt; &lt;pets&gt; &lt;pet&gt; &lt;name&gt;Lilly&lt;/name&gt; &lt;type&gt;Raccoon&lt;/type&gt; &lt;/pet&gt; &lt;/pets&gt; &lt;/person&gt; 除了更加冗长（在这种情况下，是冗长的两倍）之外，XML在解析为JavaScript友好的数据结构时还引入了一些歧义。 将XML转换为JavaScript对象可能需要数十到数百行代码，最终需要根据要解析的特定对象进行自定义。 将JSON转换为JavaScript对象只需一行代码，并且不需要任何有关要解析的对象的先验知识。
Limitations of JSON
尽管JSON是一种相对简洁，灵活的数据格式，在许多编程语言中都易于使用，但该格式仍有一些缺点。 以下是五个主要限制：
没有架构。 一方面，这意味着您可以完全灵活地以所需的任何方式表示数据。 另一方面，这意味着您很容易意外地创建了变形的数据。 仅一种数字类型：IEEE-754双精度浮点格式。 那是一个很大的数目，但这仅意味着您无法利用许多编程语言中可用的各种细微差别的数字类型。 没有日期类型。 这种遗漏意味着开发人员必须求助于日期的字符串表示形式，从而导致格式差异，或者必须以自大纪元（1970年1月1日）以来的毫秒数形式表示日期。 没有自我描述性。 这使得无法内联注释字段，需要附加文档并增加了误解的可能性。 详细。 尽管JSON不如XML冗长，但它不是最简洁的数据交换格式。 对于大批量或特殊用途的服务，您需要使用更有效的数据格式。 When should I use JSON?、
如果要编写与浏览器或本机移动应用程序通信的软件，则应使用JSON作为数据格式。 使用XML之类的格式是一种过时的选择，对于您可能会吸引的前端和移动人才来说，这是一个危险信号。
在服务器到服务器的通信中，使用诸如Apache Avro或Apache Thrift之类的序列化框架可能会更好。 在这里JSON并不是一个不错的选择，它仍然可能正是您所需要的，但是答案并不像Web和移动通信那样明确。
如果您使用的是NoSQL数据库，那么您几乎就束缚了数据库提供的所有功能。 在支持JSON作为类型的关系数据库中，一个好的经验法则是尽可能少地使用它。 关系数据库已针对适合特定模式的结构化数据进行了调整。 虽然现在JSON形式支持大多数更灵活的数据，但是在查询那些JSON对象中的属性时，您可以预料到性能会受到影响。
JSON是一种普遍存在的，事实上的格式，用于在Web服务器，浏览器和移动应用程序之间发送数据。 其简单的设计和灵活性使它易于阅读和理解，并且在大多数情况下，很容易用您选择的编程语言进行操作。 缺乏严格的架构会带来格式的灵活性，但是这种灵活性有时会导致难以确保您正确地读写JSON。
JSON解析器 应用程序代码中将以JSON形式存储的数据转换为应用程序可以使用的格式的部分称为解析器。 如您所料，JavaScript包含一个本地解析器JSON.parse（）方法 。
要使用强类型语言（如Scala或Elm）使用JSON，您可能需要做更多的工作，但是JSON的广泛采用意味着有库和实用程序可以帮助您解决所有最困难的部分。
json.org网站包含完整的代码库列表，您可以使用这些代码库来解析，生成和操作JSON，其使用的语言包括Python，C＃和COBOL。
JSON实用程序 如果您希望直接操作或检查JSON编码的数据，而无需自己编写代码，那么有许多在线实用程序可以为您提供帮助。 上面链接的代码库中的所有程序化等效项，但是您可以将JSON代码剪切并粘贴到这些基于浏览器的工具中，以帮助您更好地了解JSON或执行快速，肮脏的分析：
JSON格式化程序： JSONLint将格式化和验证任意JSON代码。 JSON查看器： Stack.hu有一个站点，该站点将创建一个交互式树以帮助您了解JSON代码的结构。 JSON Beautifier：如果要“漂亮打印” JSON代码（带有语法着色等）， Prettydiff可以为您提供帮助。 JSON转换器：是否需要快速将数据从JSON格式移动到其他内容？ Convertcsv.com具有可以将JSON转换为CSV （然后可以在Excel中打开）或XML的工具 。 JSON tutorial 准备开始学习并了解有关如何在交互式应用程序中使用JSON的更多信息？ Mozilla开发人员网络的教程很好，可以帮助您开始使用JSON和JavaScript 。 如果您准备转向其他语言，请查看有关将JSON与Java （来自Baeldung）， Python （来自DataCamp）或C＃ （来自软件测试帮助） 一起使用的教程。 祝好运！
  ]]></content></entry><entry><title>关于 Hugo NexT 组织</title><url>/about.html</url><categories/><tags/><content type="html"> Hugo NexT 组织是由众多喜爱 NexT 主题及风格的世界各地友人共同组建而成，为的就是让这个主题继续在 Hugo 引擎中也能得到发扬光大，在此也欢迎你的加入！
我们的愿景
延续 NexT 经典的黑白调搭配，保持简单的易用性及强大的功能。
使用反馈
加入 GitHub Discussions
或 Gitter
在线讨论 &amp;#x1f37b; GitHub Issues
提交错误报告 &amp;#x1f41b; GitHub Feature
表新功能的想法 &amp;#x2728; 同时国内用户也可加入 QQ 群交流： 604710815</content></entry><entry><title>Markdown 语法支持</title><url>/post/markdown-syntax.html</url><categories><category>示例文章</category><category>Markdown语法</category></categories><tags><tag>Markdown</tag><tag>语法</tag></tags><content type="html"><![CDATA[  仅以此篇文章来测试下在 NexT 主题中在通过 Hugo 引擎来建站时，是否支持 Markdown 文件内容中所写的各种语法，并展示下实际的效果。
标题样式让我们从所有可能的标题开始，在 HTML 中 &lt;h1&gt;-&lt;h6&gt;元素分别表示六个不同级别的标题样式，其中 &lt;h1&gt; 为最大标题，&lt;h6&gt;为最小标题，效果如下：
标题 1标题 2标题 3标题 4标题 5标题 6段落格式根据W3C 定义的HTML5 规范，HTML 文档由元素和文本组成。每个元素的组成都由一个开始标记表示，例如： &lt;body&gt; ，和结束标记表示，例如： &lt;/body&gt; 。（某些开始标记和结束标记在某些情况下可以省略，并由其他标记暗示。） 元素可以具有属性，这些属性控制元素的工作方式。例如：超链接是使用 a 元素及其 href 属性形成的。
Markdown 语法![图像说明](图像地址) HTML IMG 标签&lt;img src=&#34;图像地址&#34; width=&#34;宽度&#34; height=&#34;高度&#34; /&gt; SVG 格式&lt;svg&gt;xxxxxx&lt;/svg&gt; 列表类型有序列表第一个元素 第二个元素 第三个元素 无序列表列表元素 另一个元素 和其它元素 嵌套列表借助 HTML 的 ul 元素来实现。
第一项第二项第二项第一个子项目第二项第二个子项目第二项第二分项第一分项第二项第二分项第二分项第二项第二分项第三分项第二项第三个子项目第二项第三分项第一分项第二项第三分项第二分项第二项第三分项第三分项第三项自定义列表通过 HTML 的 dl 元素还支持自定义列表（表格列表）。
Hugo 目录结构assetsconfig.tomlcontentdatathemestaticHugo 模板基础模板列表模板单页模板块引用blockquote 元素表示从另一个源引用的内容，可以选择引用必须在 footer 或 cite 元素中，也可以选择使用注释和缩写等行内更改。
引用文本 这一行也是同样的引用 同样你也在 blockquote 中使用 Markdown 语法书写
带有引文的 Blockquote 元素效果。
我的目标不是赚大钱,是为了制造好的电脑。当我意识到我可以永远当工程师时，我才创办了这家公司。
— 史蒂夫·沃兹尼亚克根据 Mozilla 的网站记录，Firefox 1.0 于 2004 年发布，并取得了巨大成功。
表格表格并不算是 Markdown 的核心要素，但 Hugo 同样支持它。
ID 创建者 模型 年份 1 Honda Accord 2009 2 Toyota Camry 2012 3 Hyundai Elantra 2010 可以使用 : （英文格式冒号）来对表格内容进行对齐。
表格 可以是 很酷 左对齐 居中 右对齐 左对齐 居中 右对齐 左对齐 居中 右对齐 同样也可以在表格中使用 Markdown 语法。
表格 中 使用 Markdown 语法 斜体 粗体 中划线 代码块 Code&lt;!DOCTYPE html&gt; &lt;html lang=&#34;en&#34;&gt; &lt;head&gt; &lt;meta charset=&#34;UTF-8&#34;&gt; &lt;title&gt;Example HTML5 Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Test&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; &lt;!DOCTYPE html&gt; &lt;html lang=&#34;en&#34;&gt; &lt;head&gt; &lt;meta charset=&#34;UTF-8&#34;&gt; &lt;title&gt;Example HTML5 Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Test&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; 其它元素： abbr、sub、sup、kbd等等GIF 是位图图像格式。
H2O
C6H12O6
Xn + Yn = Zn
按X获胜。或按CTRL+ALT+F显示 FPS 计数器。
比特作为信息论中的信息单位，也被称为 shannon ，以信息论领域的创始人 Claude shannon 的名字命名。
参考：
来自 Mainroad 主题的 Basic Elements内容   ]]></content></entry><entry><title>常用复制</title><url>/post/%E5%B8%B8%E7%94%A8%E5%A4%8D%E5%88%B6/</url><categories><category>java</category><category>开发</category></categories><tags><tag>java</tag><tag>开发</tag></tags><content type="html"><![CDATA[  thymeleaf命名空间
xmlns:th=&quot;http://www.thymeleaf.org&quot;
thymeleaf依赖
&lt;dependency&gt; &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt; &lt;artifactId&gt;thymeleaf-spring5&lt;artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt; &lt;artifactId&gt;thymeleaf-extras-java8time&lt;artifactId&gt; &lt;/dependency&gt; shiro-spring
&lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt; &lt;version&gt;1.8.0&lt;/version&gt; &lt;/dependency&gt; springboot项目依赖
&lt;dependencies&gt; &lt;!--spring-cloud-dependencies --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;2021.0.0&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;!--mysql--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.27&lt;/version&gt; &lt;/dependency&gt; &lt;!--数据库连接池--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.1.23&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.2.0&lt;/version&gt; &lt;/dependency&gt; &lt;!--junit--&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;${junit.version}&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!--lombok--&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;${lombok.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!--log4j--&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;${log4j.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!--日志测试--&gt; &lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-core&lt;/artifactId&gt; &lt;version&gt;1.2.3&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;   ]]></content></entry><entry><title>开发环境准备</title><url>/post/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url><categories><category>java</category><category>开发</category></categories><tags><tag>java</tag><tag>开发</tag></tags><content type="html"> idea 2021.2.3 ultimate
jdk-8u281
要登录一个oracle账户 maven-3.6.3
jdk配置 网站
就是JAVA_HOME这些。</content></entry><entry><title>站点示例</title><url>/flinks.html</url><categories/><tags/><content type="html"> 如想交换本站友情链接，请在评论区留下你的站点信息，格式参考如下：
- name: Hugo-NexT desc: Hugo NexT 官方预览网站。 avatar: https://hugo-next.eu.org/imgs/hugo_next_avatar.png link: https://hugo-next.eu.org</content></entry></search>